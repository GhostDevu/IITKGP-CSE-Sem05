	.file	"ass6_19CS10044_19CS30053_asm3.s"
	.section	.rodata
.LC0:
	.string	"\n\n"
.LC1:
	.string	" Enter 1st no. : "
.LC2:
	.string	" Enter 2nd no. : "
.LC3:
	.string	" [Numbers must be strictly positive]\n\n"
.LC4:
	.string	" GCD : "
.LC5:
	.string	"\n LCM : "
.LC6:
	.string	"\n\n"
	.text	
	.globl	GCD
	.type	GCD, @function
GCD:
.LFB0:
	.cfi_startproc
	endbr64
	pushq 	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq 	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$44, %rsp
	movq	%rdi, -20(%rbp)
	movq	%rsi, -16(%rbp)
	movl	$0, %eax
	movl 	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-24(%rbp), %eax
	je .L2
	jmp .L3
	jmp .L3
.L2: 
	movl	-20(%rbp), %eax
	jmp	GCD_RETURN
	jmp .L3
.L3: 
	movl 	-20(%rbp), %eax
	cltd
	idivl 	-16(%rbp)
	movl 	%edx, -28(%rbp)
	movl 	-16(%rbp), %eax
	movq 	-16(%rbp), %rdi
	movl 	-28(%rbp), %eax
	movq 	-28(%rbp), %rsi
	call 	GCD
	movl 	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	jmp	GCD_RETURN
GCD_RETURN:
	leave
	.cfi_restore 5
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	GCD, .-GCD
	.globl	LCM
	.type	LCM, @function
LCM:
.LFB1:
	.cfi_startproc
	endbr64
	pushq 	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq 	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$52, %rsp
	movq	%rdi, -20(%rbp)
	movq	%rsi, -16(%rbp)
	movl 	-20(%rbp), %eax
	movq 	-20(%rbp), %rdi
	movl 	-16(%rbp), %eax
	movq 	-16(%rbp), %rsi
	call 	GCD
	movl 	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl 	%eax, -24(%rbp)
	movl 	-20(%rbp), %eax
	imull 	-16(%rbp), %eax
	movl 	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movl 	%eax, -32(%rbp)
	movl 	-32(%rbp), %eax
	cltd
	idivl 	-24(%rbp)
	movl 	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	jmp	LCM_RETURN
LCM_RETURN:
	leave
	.cfi_restore 5
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE1:
	.size	LCM, .-LCM
	.globl	main
	.type	main, @function
main:
.LFB2:
	.cfi_startproc
	endbr64
	pushq 	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq 	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$132, %rsp

	movq 	$.LC0, -24(%rbp)
	movl 	-24(%rbp), %eax
	movq 	-24(%rbp), %rdi
	call 	printStr
	movl 	%eax, -28(%rbp)
	movq 	$.LC1, -40(%rbp)
	movl 	-40(%rbp), %eax
	movq 	-40(%rbp), %rdi
	call 	printStr
	movl 	%eax, -44(%rbp)
	leaq	-32(%rbp), %rax
	movq 	%rax, -48(%rbp)
	movl 	-48(%rbp), %eax
	movq 	-48(%rbp), %rdi
	call 	readInt
	movl 	%eax, -52(%rbp)
	movq 	$.LC2, -56(%rbp)
	movl 	-56(%rbp), %eax
	movq 	-56(%rbp), %rdi
	call 	printStr
	movl 	%eax, -60(%rbp)
	leaq	-36(%rbp), %rax
	movq 	%rax, -64(%rbp)
	movl 	-64(%rbp), %eax
	movq 	-64(%rbp), %rdi
	call 	readInt
	movl 	%eax, -68(%rbp)
	movl	$0, %eax
	movl 	%eax, -72(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jle .L9
	jmp .L8
.L8: 
	movl	$0, %eax
	movl 	%eax, -76(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jle .L9
	jmp .L10
	jmp .L10
.L9: 
	movq 	$.LC3, -80(%rbp)
	movl 	-80(%rbp), %eax
	movq 	-80(%rbp), %rdi
	call 	printStr
	movl 	%eax, -84(%rbp)
	movl	$0, %eax
	movl 	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	jmp	main_RETURN
	jmp .L10
.L10: 
	movq 	$.LC4, -92(%rbp)
	movl 	-92(%rbp), %eax
	movq 	-92(%rbp), %rdi
	call 	printStr
	movl 	%eax, -96(%rbp)
	movl 	-32(%rbp), %eax
	movq 	-32(%rbp), %rdi
	movl 	-36(%rbp), %eax
	movq 	-36(%rbp), %rsi
	call 	GCD
	movl 	%eax, -100(%rbp)
	movl 	-100(%rbp), %eax
	movq 	-100(%rbp), %rdi
	call 	printInt
	movl 	%eax, -104(%rbp)
	movq 	$.LC5, -108(%rbp)
	movl 	-108(%rbp), %eax
	movq 	-108(%rbp), %rdi
	call 	printStr
	movl 	%eax, -112(%rbp)
	movl 	-32(%rbp), %eax
	movq 	-32(%rbp), %rdi
	movl 	-36(%rbp), %eax
	movq 	-36(%rbp), %rsi
	call 	LCM
	movl 	%eax, -116(%rbp)
	movl 	-116(%rbp), %eax
	movq 	-116(%rbp), %rdi
	call 	printInt
	movl 	%eax, -120(%rbp)
	movq 	$.LC6, -124(%rbp)
	movl 	-124(%rbp), %eax
	movq 	-124(%rbp), %rdi
	call 	printStr
	movl 	%eax, -128(%rbp)
main_RETURN:
	leave
	.cfi_restore 5
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	main, .-main
	.ident		"generated by tinyC compiler"
	.ident		">> Hritaban Ghosh (19CS30053)"
	.ident		">> Nakul Aggarwal (19CS10044)"
	.section	.note.GNU-stack,"",@progbits
